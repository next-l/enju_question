#result_index
  p
    = t('page.sort_by')
    | : 
    - if params[:sort_by].blank?
      strong
        = t('question.last_answered_at')
    - else
      = link_to t('question.last_answered_at'), url_for(params.merge(sort_by: nil, only_path: true))
      - if params[:sort_by] == 'created_at'
        strong
          = t('question.created_at')
      - else
        = link_to t('question.created_at'), url_for(params.merge(sort_by: 'created_at', only_path: true))
        - if params[:sort_by] == 'answers_count'
          strong
            = t('activerecord.attributes.question.answers_count')
        - else
          = link_to t('activerecord.attributes.question.answers_count'), url_for(params.merge(sort_by: 'answers_count', only_path: true))
  - if @count[:query_result] > 0
    table.index
      tr
        th
          | Id
        th
          = t('activerecord.models.question')
        th
        th
      - @questions.each_with_index do |question, i|
        |  <tr class="line
        = cycle("0", "1")
        | "> 
        td[style="width: 30px"]
          = question.id
        td
          = link_to truncate(question.body, length: 60), question
          |  (
          = link_to question.user.username, question.user.profile if question.user.try(:profile)
          | ) 
          br
          = t('question.last_answered_at')
          | : 
          = l(question.answers.last.updated_at) if question.answers.last
        td
          = link_to image_tag('icons/comments.png', alt: t('answer.count'), size: '16x16'), question
          = link_to question.answers.size, question
          - if question.solved
            = t('question.solved')
          - else
            = t('question.not_solved')
        td
          - if policy(question).update?
            = link_to t('page.edit'), edit_question_path(question)
          - if policy(question).destroy?
            = link_to t('page.destroy'), question, data: {confirm: t('page.are_you_sure')}, method: :delete
  - else
    p
      = t('question.no_record_found')
    = paginate(@questions, remote: true)
